<?php
/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class RescodeType {
  const RES_SUCCESS = 0;
  const RES_DEFAULT_EXCEPTION = 1;
  const RES_ID_NOT_EXIST = 2;
  const RES_REMAIN_NOT_ENOUGH = 3;
  const RES_PARAM_WRONG = 4;
  const RES_OUT_RANGE = 5;
  const RES_CONNECT_EXCEPTION = 6;
  const RES_OBJECT_NULL = 7;
  const RES_TYPE_IS_NOT_MATCH = 8;
  const RES_NO_AVAILABLE_CONNECTION = 9;
  const RES_UID_IS_NOT_MATCH = 10;
  const RES_BLACK_FILTER = 11;
  const RES_IP_FILTER = 12;
  const RES_SINGLE_AMOUNT_FILTER = 13;
  const RES_DAY_AMOUNT_FILTER = 14;
  const RES_TOTAL_AMOUNT_FILTER = 15;
  const RES_SOURCETYPE_NO_ALLOW = 16;
  const RES_SOURCEDESC_FIELD = 17;
  const RES_OPERATE_AMOUNT = 18;
  const RES_OPERATE = 19;
  const RES_TIME_NO_EFFECTIVE = 20;
  const RES_SOURCETYPE_KEY_WRONG = 21;
  static public $__names = array(
    0 => 'RES_SUCCESS',
    1 => 'RES_DEFAULT_EXCEPTION',
    2 => 'RES_ID_NOT_EXIST',
    3 => 'RES_REMAIN_NOT_ENOUGH',
    4 => 'RES_PARAM_WRONG',
    5 => 'RES_OUT_RANGE',
    6 => 'RES_CONNECT_EXCEPTION',
    7 => 'RES_OBJECT_NULL',
    8 => 'RES_TYPE_IS_NOT_MATCH',
    9 => 'RES_NO_AVAILABLE_CONNECTION',
    10 => 'RES_UID_IS_NOT_MATCH',
    11 => 'RES_BLACK_FILTER',
    12 => 'RES_IP_FILTER',
    13 => 'RES_SINGLE_AMOUNT_FILTER',
    14 => 'RES_DAY_AMOUNT_FILTER',
    15 => 'RES_TOTAL_AMOUNT_FILTER',
    16 => 'RES_SOURCETYPE_NO_ALLOW',
    17 => 'RES_SOURCEDESC_FIELD',
    18 => 'RES_OPERATE_AMOUNT',
    19 => 'RES_OPERATE',
    20 => 'RES_TIME_NO_EFFECTIVE',
    21 => 'RES_SOURCETYPE_KEY_WRONG',
  );
}

final class BalanceType {
  const GOLD_POINT = 0;
  const GOLD = 1;
  const POINT = 2;
  const SILVER = 3;
  static public $__names = array(
    0 => 'GOLD_POINT',
    1 => 'GOLD',
    2 => 'POINT',
    3 => 'SILVER',
  );
}

class BillThriftException extends TException {
  static $_TSPEC;

  /**
   * @var int
   */
  public $whatOp = null;
  /**
   * @var string
   */
  public $why = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'whatOp',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'why',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['whatOp'])) {
        $this->whatOp = $vals['whatOp'];
      }
      if (isset($vals['why'])) {
        $this->why = $vals['why'];
      }
    }
  }

  public function getName() {
    return 'BillThriftException';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->whatOp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->why);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BillThriftException');
    if ($this->whatOp !== null) {
      $xfer += $output->writeFieldBegin('whatOp', TType::I32, 1);
      $xfer += $output->writeI32($this->whatOp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->why !== null) {
      $xfer += $output->writeFieldBegin('why', TType::STRING, 2);
      $xfer += $output->writeString($this->why);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BillContent {
  static $_TSPEC;

  /**
   * @var string
   */
  public $bill_id = null;
  /**
   * @var int
   */
  public $source_type = null;
  /**
   * @var int
   */
  public $uid = null;
  /**
   * @var int
   */
  public $gold = 0;
  /**
   * @var int
   */
  public $point = 0;
  /**
   * @var string
   */
  public $source_desc = null;
  /**
   * @var int
   */
  public $trans_time = null;
  /**
   * @var int
   */
  public $silver = 0;
  /**
   * @var string
   */
  public $source_type_key = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'bill_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'source_type',
          'type' => TType::I16,
          ),
        3 => array(
          'var' => 'uid',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'gold',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'point',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'source_desc',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'trans_time',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'silver',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'source_type_key',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['bill_id'])) {
        $this->bill_id = $vals['bill_id'];
      }
      if (isset($vals['source_type'])) {
        $this->source_type = $vals['source_type'];
      }
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['gold'])) {
        $this->gold = $vals['gold'];
      }
      if (isset($vals['point'])) {
        $this->point = $vals['point'];
      }
      if (isset($vals['source_desc'])) {
        $this->source_desc = $vals['source_desc'];
      }
      if (isset($vals['trans_time'])) {
        $this->trans_time = $vals['trans_time'];
      }
      if (isset($vals['silver'])) {
        $this->silver = $vals['silver'];
      }
      if (isset($vals['source_type_key'])) {
        $this->source_type_key = $vals['source_type_key'];
      }
    }
  }

  public function getName() {
    return 'BillContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->bill_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->source_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->gold);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->point);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->source_desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->trans_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->silver);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->source_type_key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BillContent');
    if ($this->bill_id !== null) {
      $xfer += $output->writeFieldBegin('bill_id', TType::STRING, 1);
      $xfer += $output->writeString($this->bill_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->source_type !== null) {
      $xfer += $output->writeFieldBegin('source_type', TType::I16, 2);
      $xfer += $output->writeI16($this->source_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I64, 3);
      $xfer += $output->writeI64($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gold !== null) {
      $xfer += $output->writeFieldBegin('gold', TType::I64, 4);
      $xfer += $output->writeI64($this->gold);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->point !== null) {
      $xfer += $output->writeFieldBegin('point', TType::I64, 5);
      $xfer += $output->writeI64($this->point);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->source_desc !== null) {
      $xfer += $output->writeFieldBegin('source_desc', TType::STRING, 6);
      $xfer += $output->writeString($this->source_desc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->trans_time !== null) {
      $xfer += $output->writeFieldBegin('trans_time', TType::I32, 7);
      $xfer += $output->writeI32($this->trans_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->silver !== null) {
      $xfer += $output->writeFieldBegin('silver', TType::I64, 8);
      $xfer += $output->writeI64($this->silver);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->source_type_key !== null) {
      $xfer += $output->writeFieldBegin('source_type_key', TType::STRING, 9);
      $xfer += $output->writeString($this->source_type_key);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GiftContent {
  static $_TSPEC;

  /**
   * @var string
   */
  public $bill_id = null;
  /**
   * @var int
   */
  public $source_type = null;
  /**
   * @var int
   */
  public $send_uid = null;
  /**
   * @var int
   */
  public $send_gold = 0;
  /**
   * @var int
   */
  public $recv_uid = null;
  /**
   * @var int
   */
  public $recv_point = 0;
  /**
   * @var string
   */
  public $source_desc = null;
  /**
   * @var int
   */
  public $is_sync = 0;
  /**
   * @var int
   */
  public $trans_time = null;
  /**
   * @var string
   */
  public $source_type_key = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'bill_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'source_type',
          'type' => TType::I16,
          ),
        3 => array(
          'var' => 'send_uid',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'send_gold',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'recv_uid',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'recv_point',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'source_desc',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'is_sync',
          'type' => TType::I16,
          ),
        9 => array(
          'var' => 'trans_time',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'source_type_key',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['bill_id'])) {
        $this->bill_id = $vals['bill_id'];
      }
      if (isset($vals['source_type'])) {
        $this->source_type = $vals['source_type'];
      }
      if (isset($vals['send_uid'])) {
        $this->send_uid = $vals['send_uid'];
      }
      if (isset($vals['send_gold'])) {
        $this->send_gold = $vals['send_gold'];
      }
      if (isset($vals['recv_uid'])) {
        $this->recv_uid = $vals['recv_uid'];
      }
      if (isset($vals['recv_point'])) {
        $this->recv_point = $vals['recv_point'];
      }
      if (isset($vals['source_desc'])) {
        $this->source_desc = $vals['source_desc'];
      }
      if (isset($vals['is_sync'])) {
        $this->is_sync = $vals['is_sync'];
      }
      if (isset($vals['trans_time'])) {
        $this->trans_time = $vals['trans_time'];
      }
      if (isset($vals['source_type_key'])) {
        $this->source_type_key = $vals['source_type_key'];
      }
    }
  }

  public function getName() {
    return 'GiftContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->bill_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->source_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->send_uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->send_gold);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->recv_uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->recv_point);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->source_desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->is_sync);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->trans_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->source_type_key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GiftContent');
    if ($this->bill_id !== null) {
      $xfer += $output->writeFieldBegin('bill_id', TType::STRING, 1);
      $xfer += $output->writeString($this->bill_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->source_type !== null) {
      $xfer += $output->writeFieldBegin('source_type', TType::I16, 2);
      $xfer += $output->writeI16($this->source_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->send_uid !== null) {
      $xfer += $output->writeFieldBegin('send_uid', TType::I64, 3);
      $xfer += $output->writeI64($this->send_uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->send_gold !== null) {
      $xfer += $output->writeFieldBegin('send_gold', TType::I64, 4);
      $xfer += $output->writeI64($this->send_gold);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->recv_uid !== null) {
      $xfer += $output->writeFieldBegin('recv_uid', TType::I64, 5);
      $xfer += $output->writeI64($this->recv_uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->recv_point !== null) {
      $xfer += $output->writeFieldBegin('recv_point', TType::I64, 6);
      $xfer += $output->writeI64($this->recv_point);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->source_desc !== null) {
      $xfer += $output->writeFieldBegin('source_desc', TType::STRING, 7);
      $xfer += $output->writeString($this->source_desc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_sync !== null) {
      $xfer += $output->writeFieldBegin('is_sync', TType::I16, 8);
      $xfer += $output->writeI16($this->is_sync);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->trans_time !== null) {
      $xfer += $output->writeFieldBegin('trans_time', TType::I32, 9);
      $xfer += $output->writeI32($this->trans_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->source_type_key !== null) {
      $xfer += $output->writeFieldBegin('source_type_key', TType::STRING, 10);
      $xfer += $output->writeString($this->source_type_key);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SilverContent {
  static $_TSPEC;

  /**
   * @var string
   */
  public $bill_id = null;
  /**
   * @var int
   */
  public $source_type = null;
  /**
   * @var int
   */
  public $send_uid = null;
  /**
   * @var int
   */
  public $send_silver = 0;
  /**
   * @var int
   */
  public $recv_uid = null;
  /**
   * @var int
   */
  public $recv_silver = 0;
  /**
   * @var string
   */
  public $source_desc = null;
  /**
   * @var int
   */
  public $trans_time = null;
  /**
   * @var string
   */
  public $source_type_key = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'bill_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'source_type',
          'type' => TType::I16,
          ),
        3 => array(
          'var' => 'send_uid',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'send_silver',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'recv_uid',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'recv_silver',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'source_desc',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'trans_time',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'source_type_key',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['bill_id'])) {
        $this->bill_id = $vals['bill_id'];
      }
      if (isset($vals['source_type'])) {
        $this->source_type = $vals['source_type'];
      }
      if (isset($vals['send_uid'])) {
        $this->send_uid = $vals['send_uid'];
      }
      if (isset($vals['send_silver'])) {
        $this->send_silver = $vals['send_silver'];
      }
      if (isset($vals['recv_uid'])) {
        $this->recv_uid = $vals['recv_uid'];
      }
      if (isset($vals['recv_silver'])) {
        $this->recv_silver = $vals['recv_silver'];
      }
      if (isset($vals['source_desc'])) {
        $this->source_desc = $vals['source_desc'];
      }
      if (isset($vals['trans_time'])) {
        $this->trans_time = $vals['trans_time'];
      }
      if (isset($vals['source_type_key'])) {
        $this->source_type_key = $vals['source_type_key'];
      }
    }
  }

  public function getName() {
    return 'SilverContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->bill_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->source_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->send_uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->send_silver);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->recv_uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->recv_silver);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->source_desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->trans_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->source_type_key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SilverContent');
    if ($this->bill_id !== null) {
      $xfer += $output->writeFieldBegin('bill_id', TType::STRING, 1);
      $xfer += $output->writeString($this->bill_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->source_type !== null) {
      $xfer += $output->writeFieldBegin('source_type', TType::I16, 2);
      $xfer += $output->writeI16($this->source_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->send_uid !== null) {
      $xfer += $output->writeFieldBegin('send_uid', TType::I64, 3);
      $xfer += $output->writeI64($this->send_uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->send_silver !== null) {
      $xfer += $output->writeFieldBegin('send_silver', TType::I64, 4);
      $xfer += $output->writeI64($this->send_silver);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->recv_uid !== null) {
      $xfer += $output->writeFieldBegin('recv_uid', TType::I64, 5);
      $xfer += $output->writeI64($this->recv_uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->recv_silver !== null) {
      $xfer += $output->writeFieldBegin('recv_silver', TType::I64, 6);
      $xfer += $output->writeI64($this->recv_silver);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->source_desc !== null) {
      $xfer += $output->writeFieldBegin('source_desc', TType::STRING, 7);
      $xfer += $output->writeString($this->source_desc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->trans_time !== null) {
      $xfer += $output->writeFieldBegin('trans_time', TType::I32, 8);
      $xfer += $output->writeI32($this->trans_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->source_type_key !== null) {
      $xfer += $output->writeFieldBegin('source_type_key', TType::STRING, 9);
      $xfer += $output->writeString($this->source_type_key);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SeqResult {
  static $_TSPEC;

  /**
   * @var int
   */
  public $rescode = null;
  /**
   * @var string
   */
  public $bill_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'rescode',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'bill_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['rescode'])) {
        $this->rescode = $vals['rescode'];
      }
      if (isset($vals['bill_id'])) {
        $this->bill_id = $vals['bill_id'];
      }
    }
  }

  public function getName() {
    return 'SeqResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->rescode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->bill_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SeqResult');
    if ($this->rescode !== null) {
      $xfer += $output->writeFieldBegin('rescode', TType::I64, 1);
      $xfer += $output->writeI64($this->rescode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bill_id !== null) {
      $xfer += $output->writeFieldBegin('bill_id', TType::STRING, 2);
      $xfer += $output->writeString($this->bill_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BillResult {
  static $_TSPEC;

  /**
   * @var int
   */
  public $rescode = null;
  /**
   * @var string
   */
  public $res = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'rescode',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'res',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['rescode'])) {
        $this->rescode = $vals['rescode'];
      }
      if (isset($vals['res'])) {
        $this->res = $vals['res'];
      }
    }
  }

  public function getName() {
    return 'BillResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->rescode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->res);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BillResult');
    if ($this->rescode !== null) {
      $xfer += $output->writeFieldBegin('rescode', TType::I64, 1);
      $xfer += $output->writeI64($this->rescode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->res !== null) {
      $xfer += $output->writeFieldBegin('res', TType::STRING, 2);
      $xfer += $output->writeString($this->res);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BalanceContent {
  static $_TSPEC;

  /**
   * @var int
   */
  public $uid = null;
  /**
   * @var int
   */
  public $source_type = null;
  /**
   * @var int
   */
  public $balance_type = 0;
  /**
   * @var int
   */
  public $is_master = 0;
  /**
   * @var string
   */
  public $source_type_key = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'source_type',
          'type' => TType::I16,
          ),
        3 => array(
          'var' => 'balance_type',
          'type' => TType::I16,
          ),
        4 => array(
          'var' => 'is_master',
          'type' => TType::I16,
          ),
        5 => array(
          'var' => 'source_type_key',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['source_type'])) {
        $this->source_type = $vals['source_type'];
      }
      if (isset($vals['balance_type'])) {
        $this->balance_type = $vals['balance_type'];
      }
      if (isset($vals['is_master'])) {
        $this->is_master = $vals['is_master'];
      }
      if (isset($vals['source_type_key'])) {
        $this->source_type_key = $vals['source_type_key'];
      }
    }
  }

  public function getName() {
    return 'BalanceContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->source_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->balance_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->is_master);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->source_type_key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BalanceContent');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I64, 1);
      $xfer += $output->writeI64($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->source_type !== null) {
      $xfer += $output->writeFieldBegin('source_type', TType::I16, 2);
      $xfer += $output->writeI16($this->source_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->balance_type !== null) {
      $xfer += $output->writeFieldBegin('balance_type', TType::I16, 3);
      $xfer += $output->writeI16($this->balance_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_master !== null) {
      $xfer += $output->writeFieldBegin('is_master', TType::I16, 4);
      $xfer += $output->writeI16($this->is_master);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->source_type_key !== null) {
      $xfer += $output->writeFieldBegin('source_type_key', TType::STRING, 5);
      $xfer += $output->writeString($this->source_type_key);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BalanceResult {
  static $_TSPEC;

  /**
   * @var int
   */
  public $rescode = null;
  /**
   * @var int
   */
  public $uid = null;
  /**
   * @var int
   */
  public $gold = null;
  /**
   * @var int
   */
  public $point = null;
  /**
   * @var int
   */
  public $silver = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'rescode',
          'type' => TType::I16,
          ),
        2 => array(
          'var' => 'uid',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'gold',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'point',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'silver',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['rescode'])) {
        $this->rescode = $vals['rescode'];
      }
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['gold'])) {
        $this->gold = $vals['gold'];
      }
      if (isset($vals['point'])) {
        $this->point = $vals['point'];
      }
      if (isset($vals['silver'])) {
        $this->silver = $vals['silver'];
      }
    }
  }

  public function getName() {
    return 'BalanceResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->rescode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->gold);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->point);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->silver);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BalanceResult');
    if ($this->rescode !== null) {
      $xfer += $output->writeFieldBegin('rescode', TType::I16, 1);
      $xfer += $output->writeI16($this->rescode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I64, 2);
      $xfer += $output->writeI64($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gold !== null) {
      $xfer += $output->writeFieldBegin('gold', TType::I64, 3);
      $xfer += $output->writeI64($this->gold);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->point !== null) {
      $xfer += $output->writeFieldBegin('point', TType::I64, 4);
      $xfer += $output->writeI64($this->point);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->silver !== null) {
      $xfer += $output->writeFieldBegin('silver', TType::I64, 5);
      $xfer += $output->writeI64($this->silver);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


